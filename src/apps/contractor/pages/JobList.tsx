import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Card,
  CardContent,
  Grid,
  Chip,
  Button,
  Checkbox,
  FormControlLabel,
  Collapse,
  Snackbar,
  Alert,
  Paper,
  TextField
} from '@mui/material';
import { Schedule, LocationOn, ExpandMore, ExpandLess, CalendarMonth, Cancel, AttachFile } from '@mui/icons-material';
import { JobService } from '../../../shared/services/jobService';
import { JobCancellationService } from '../../../shared/services/jobCancellationService';
import { ConstructionJob } from '../../../types';
import { useAuth } from '../../../shared/contexts/AuthContext';
import CalendarView from './CalendarView';

const JobList: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();

  // Ï£ºÏÜåÎ•º Íµ¨/ÎèôÍπåÏßÄÎßå ÌëúÏãúÌïòÎäî Ìï®Ïàò
  const formatAddressForCard = (address: string): string => {
    const parts = address.split(' ');
    
    if (parts.length >= 4) {
      return parts.slice(2, 4).join(' ');
    } else if (parts.length >= 3) {
      return parts.slice(1, 3).join(' ');
    } else if (parts.length >= 2) {
      return parts.slice(1).join(' ');
    }
    
    return address;
  };

  const [jobs, setJobs] = useState<ConstructionJob[]>([]);
  const [myJobs, setMyJobs] = useState<ConstructionJob[]>([]);
  const [loading, setLoading] = useState(true);
  const [regionFilter, setRegionFilter] = useState<string[]>([]);
  const [expandedRegions, setExpandedRegions] = useState<string[]>([]);
  const [viewMode, setViewMode] = useState<'list' | 'calendar'>('list');
  const [regionFilterExpanded, setRegionFilterExpanded] = useState(true);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: 'success' | 'error';
  }>({
    open: false,
    message: '',
    severity: 'success'
  });

  // Ï∑®ÏÜå Í¥ÄÎ†® ÏÉÅÌÉú
  const [cancelDialogOpen, setCancelDialogOpen] = useState(false);
  const [selectedJobForCancel, setSelectedJobForCancel] = useState<ConstructionJob | null>(null);
  const [cancelReason, setCancelReason] = useState('');
  const [cancellationInfo, setCancellationInfo] = useState<{
    canCancel: boolean;
    reason?: string;
    cancellationNumber?: number;
    totalCancellationsToday?: number;
    maxCancellationHours?: number;
    maxDailyCancellations?: number;
    feeAmount?: number;
    feeRate?: number;
    requiresFee?: boolean;
  } | null>(null);

  // ÏßÄÏó≠ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞
  const regionData = {
    'ÏÑúÏö∏ÌäπÎ≥ÑÏãú': ['Í∞ïÎÇ®Íµ¨', 'ÏÑúÏ¥àÍµ¨', 'ÎßàÌè¨Íµ¨', 'ÏÜ°ÌååÍµ¨', 'ÏòÅÎì±Ìè¨Íµ¨', 'Ï¢ÖÎ°úÍµ¨', 'Ï§ëÍµ¨', 'Ïö©ÏÇ∞Íµ¨', 'ÏÑ±ÎèôÍµ¨', 'Í¥ëÏßÑÍµ¨', 'ÎèôÎåÄÎ¨∏Íµ¨', 'Ï§ëÎûëÍµ¨', 'ÏÑ±Î∂ÅÍµ¨', 'Í∞ïÎ∂ÅÍµ¨', 'ÎèÑÎ¥âÍµ¨', 'ÎÖ∏ÏõêÍµ¨', 'ÏùÄÌèâÍµ¨', 'ÏÑúÎåÄÎ¨∏Íµ¨', 'Í∞ïÏÑúÍµ¨', 'Íµ¨Î°úÍµ¨', 'Í∏àÏ≤úÍµ¨', 'ÎèôÏûëÍµ¨', 'Í¥ÄÏïÖÍµ¨'],
    'Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú': ['Ï§ëÍµ¨', 'ÏÑúÍµ¨', 'ÎèôÍµ¨', 'ÏòÅÎèÑÍµ¨', 'Î∂ÄÏÇ∞ÏßÑÍµ¨', 'ÎèôÎûòÍµ¨', 'ÎÇ®Íµ¨', 'Î∂ÅÍµ¨', 'Ìï¥Ïö¥ÎåÄÍµ¨', 'ÏÇ¨ÌïòÍµ¨', 'Í∏àÏ†ïÍµ¨', 'Í∞ïÏÑúÍµ¨', 'Ïó∞Ï†úÍµ¨', 'ÏàòÏòÅÍµ¨', 'ÏÇ¨ÏÉÅÍµ¨', 'Í∏∞Ïû•Íµ∞'],
    'ÎåÄÍµ¨Í¥ëÏó≠Ïãú': ['Ï§ëÍµ¨', 'ÎèôÍµ¨', 'ÏÑúÍµ¨', 'ÎÇ®Íµ¨', 'Î∂ÅÍµ¨', 'ÏàòÏÑ±Íµ¨', 'Îã¨ÏÑúÍµ¨', 'Îã¨ÏÑ±Íµ∞'],
    'Ïù∏Ï≤úÍ¥ëÏó≠Ïãú': ['Ï§ëÍµ¨', 'ÎèôÍµ¨', 'ÎØ∏Ï∂îÌôÄÍµ¨', 'Ïó∞ÏàòÍµ¨', 'ÎÇ®ÎèôÍµ¨', 'Î∂ÄÌèâÍµ¨', 'Í≥ÑÏñëÍµ¨', 'ÏÑúÍµ¨', 'Í∞ïÌôîÍµ∞', 'ÏòπÏßÑÍµ∞'],
    'Í¥ëÏ£ºÍ¥ëÏó≠Ïãú': ['ÎèôÍµ¨', 'ÏÑúÍµ¨', 'ÎÇ®Íµ¨', 'Î∂ÅÍµ¨', 'Í¥ëÏÇ∞Íµ¨'],
    'ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú': ['ÎèôÍµ¨', 'Ï§ëÍµ¨', 'ÏÑúÍµ¨', 'Ïú†ÏÑ±Íµ¨', 'ÎåÄÎçïÍµ¨'],
    'Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú': ['Ï§ëÍµ¨', 'ÎÇ®Íµ¨', 'ÎèôÍµ¨', 'Î∂ÅÍµ¨', 'Ïö∏Ï£ºÍµ∞'],
    'ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú': ['ÏÑ∏Ï¢ÖÌäπÎ≥ÑÏûêÏπòÏãú'],
    'Í≤ΩÍ∏∞ÎèÑ': ['ÏàòÏõêÏãú', 'ÏÑ±ÎÇ®Ïãú', 'ÏùòÏ†ïÎ∂ÄÏãú', 'ÏïàÏñëÏãú', 'Î∂ÄÏ≤úÏãú', 'Í¥ëÎ™ÖÏãú', 'ÌèâÌÉùÏãú', 'ÎèôÎëêÏ≤úÏãú', 'ÏïàÏÇ∞Ïãú', 'Í≥†ÏñëÏãú', 'Í≥ºÏ≤úÏãú', 'Íµ¨Î¶¨Ïãú', 'ÎÇ®ÏñëÏ£ºÏãú', 'Ïò§ÏÇ∞Ïãú', 'ÏãúÌù•Ïãú', 'Íµ∞Ìè¨Ïãú', 'ÏùòÏôïÏãú', 'ÌïòÎÇ®Ïãú', 'Ïö©Ïù∏Ïãú', 'ÌååÏ£ºÏãú', 'Ïù¥Ï≤úÏãú', 'ÏïàÏÑ±Ïãú', 'ÍπÄÌè¨Ïãú', 'ÌôîÏÑ±Ïãú', 'Í¥ëÏ£ºÏãú', 'Ïó¨Ï£ºÏãú', 'ÏñëÌèâÍµ∞', 'Í≥†ÏñëÍµ∞', 'Ïó∞Ï≤úÍµ∞', 'Í∞ÄÌèâÍµ∞'],
    'Í∞ïÏõêÎèÑ': ['Ï∂òÏ≤úÏãú', 'ÏõêÏ£ºÏãú', 'Í∞ïÎ¶âÏãú', 'ÎèôÌï¥Ïãú', 'ÌÉúÎ∞±Ïãú', 'ÏÜçÏ¥àÏãú', 'ÏÇºÏ≤ôÏãú', 'ÌôçÏ≤úÍµ∞', 'Ìö°ÏÑ±Íµ∞', 'ÏòÅÏõîÍµ∞', 'ÌèâÏ∞ΩÍµ∞', 'Ï†ïÏÑ†Íµ∞', 'Ï≤†ÏõêÍµ∞', 'ÌôîÏ≤úÍµ∞', 'ÏñëÍµ¨Íµ∞', 'Ïù∏Ï†úÍµ∞', 'Í≥†ÏÑ±Íµ∞', 'ÏñëÏñëÍµ∞'],
    'Ï∂©Ï≤≠Î∂ÅÎèÑ': ['Ï≤≠Ï£ºÏãú', 'Ï∂©Ï£ºÏãú', 'Ï†úÏ≤úÏãú', 'Î≥¥ÏùÄÍµ∞', 'Ïò•Ï≤úÍµ∞', 'ÏòÅÎèôÍµ∞', 'Ï¶ùÌèâÍµ∞', 'ÏßÑÏ≤úÍµ∞', 'Í¥¥ÏÇ∞Íµ∞', 'ÏùåÏÑ±Íµ∞', 'Îã®ÏñëÍµ∞'],
    'Ï∂©Ï≤≠ÎÇ®ÎèÑ': ['Ï≤úÏïàÏãú', 'Í≥µÏ£ºÏãú', 'Î≥¥Î†πÏãú', 'ÏïÑÏÇ∞Ïãú', 'ÏÑúÏÇ∞Ïãú', 'ÎÖºÏÇ∞Ïãú', 'Í≥ÑÎ£°Ïãú', 'ÎãπÏßÑÏãú', 'Í∏àÏÇ∞Íµ∞', 'Î∂ÄÏó¨Íµ∞', 'ÏÑúÏ≤úÍµ∞', 'Ï≤≠ÏñëÍµ∞', 'ÌôçÏÑ±Íµ∞', 'ÏòàÏÇ∞Íµ∞', 'ÌÉúÏïàÍµ∞'],
    'Ï†ÑÎùºÎ∂ÅÎèÑ': ['Ï†ÑÏ£ºÏãú', 'Íµ∞ÏÇ∞Ïãú', 'ÏùµÏÇ∞Ïãú', 'Ï†ïÏùçÏãú', 'ÎÇ®ÏõêÏãú', 'ÍπÄÏ†úÏãú', 'ÏôÑÏ£ºÍµ∞', 'ÏßÑÏïàÍµ∞', 'Î¨¥Ï£ºÍµ∞', 'Ïû•ÏàòÍµ∞', 'ÏûÑÏã§Íµ∞', 'ÏàúÏ∞ΩÍµ∞', 'Í≥†Ï∞ΩÍµ∞', 'Î∂ÄÏïàÍµ∞'],
    'Ï†ÑÎùºÎÇ®ÎèÑ': ['Î™©Ìè¨Ïãú', 'Ïó¨ÏàòÏãú', 'ÏàúÏ≤úÏãú', 'ÎÇòÏ£ºÏãú', 'Í¥ëÏñëÏãú', 'Îã¥ÏñëÍµ∞', 'Í≥°ÏÑ±Íµ∞', 'Íµ¨Î°ÄÍµ∞', 'Í≥†Ìù•Íµ∞', 'Î≥¥ÏÑ±Íµ∞', 'ÌôîÏàúÍµ∞', 'Ïû•Ìù•Íµ∞', 'Í∞ïÏßÑÍµ∞', 'Ìï¥ÎÇ®Íµ∞', 'ÏòÅÏïîÍµ∞', 'Î¨¥ÏïàÍµ∞', 'Ìï®ÌèâÍµ∞', 'ÏòÅÍ¥ëÍµ∞', 'Ïû•ÏÑ±Íµ∞', 'ÏôÑÎèÑÍµ∞', 'ÏßÑÎèÑÍµ∞', 'Ïã†ÏïàÍµ∞'],
    'Í≤ΩÏÉÅÎ∂ÅÎèÑ': ['Ìè¨Ìï≠Ïãú', 'Í≤ΩÏ£ºÏãú', 'ÍπÄÏ≤úÏãú', 'ÏïàÎèôÏãú', 'Íµ¨ÎØ∏Ïãú', 'ÏòÅÏ£ºÏãú', 'ÏòÅÏ≤úÏãú', 'ÏÉÅÏ£ºÏãú', 'Î¨∏Í≤ΩÏãú', 'Í≤ΩÏÇ∞Ïãú', 'Íµ∞ÏúÑÍµ∞', 'ÏùòÏÑ±Íµ∞', 'Ï≤≠ÏÜ°Íµ∞', 'ÏòÅÏñëÍµ∞', 'ÏòÅÎçïÍµ∞', 'Ï≤≠ÎèÑÍµ∞', 'Í≥†Î†πÍµ∞', 'ÏÑ±Ï£ºÍµ∞', 'Ïπ†Í≥°Íµ∞', 'ÏòàÏ≤úÍµ∞', 'Î¥âÌôîÍµ∞', 'Ïö∏ÏßÑÍµ∞', 'Ïö∏Î¶âÍµ∞'],
    'Í≤ΩÏÉÅÎÇ®ÎèÑ': ['Ï∞ΩÏõêÏãú', 'ÏßÑÏ£ºÏãú', 'ÌÜµÏòÅÏãú', 'ÏÇ¨Ï≤úÏãú', 'ÍπÄÌï¥Ïãú', 'Î∞ÄÏñëÏãú', 'Í±∞Ï†úÏãú', 'ÏñëÏÇ∞Ïãú', 'ÏùòÎ†πÍµ∞', 'Ìï®ÏïàÍµ∞', 'Ï∞ΩÎÖïÍµ∞', 'Í≥†ÏÑ±Íµ∞', 'ÎÇ®Ìï¥Íµ∞', 'ÌïòÎèôÍµ∞', 'ÏÇ∞Ï≤≠Íµ∞', 'Ìï®ÏñëÍµ∞', 'Í±∞Ï∞ΩÍµ∞', 'Ìï©Ï≤úÍµ∞'],
    'Ï†úÏ£ºÌäπÎ≥ÑÏûêÏπòÎèÑ': ['Ï†úÏ£ºÏãú', 'ÏÑúÍ∑ÄÌè¨Ïãú']
  };

  // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadData = async () => {
    if (!user) return;
    
      try {
        setLoading(true);
      
      // Î™®Îì† ÏûëÏóÖ Ï°∞Ìöå
      const allJobs = await JobService.getAllJobs();
          setJobs(allJobs);
      
      // ÎÇ¥ ÏûëÏóÖ ÌïÑÌÑ∞ÎßÅ (Î∞∞Ï†ïÎêú ÏûëÏóÖÎì§)
      const myJobs = allJobs.filter(job => 
        job.contractorId === user.id && 
        ['assigned', 'product_preparing', 'product_ready', 'pickup_completed', 'in_progress', 'completed', 'cancelled', 'product_not_ready', 'customer_absent', 'schedule_changed'].includes(job.status)
      );
      setMyJobs(myJobs);
      
    } catch (error: unknown) {
      console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      setSnackbar({
        open: true,
        message: 'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        severity: 'error'
      });
      } finally {
        setLoading(false);
      }
    };

  useEffect(() => {
    loadData();
  }, [user]);

  // ÏûëÏóÖ ÏàòÎùΩ
  const handleAcceptJob = async (jobId: string) => {
    try {
      await JobService.updateJobStatus(jobId, 'assigned', user?.id);
      setSnackbar({
        open: true,
        message: 'üéâ ÏûëÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏàòÎùΩÎêòÏóàÏäµÎãàÎã§!',
        severity: 'success'
      });
      await loadData();
    } catch (error: unknown) {
      console.error('ÏûëÏóÖ ÏàòÎùΩ Ïã§Ìå®:', error);
      setSnackbar({
        open: true,
        message: 'ÏûëÏóÖ ÏàòÎùΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
        severity: 'error'
      });
    }
  };

  // ÏûëÏóÖ Ï∑®ÏÜå ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ Ïó¥Í∏∞
  const handleCancelJobClick = async (job: ConstructionJob) => {
    if (!user?.id) return;
    
    try {
      const canCancelResult = await JobCancellationService.canCancelJob(job.id, user.id);
      setCancellationInfo(canCancelResult);
      setSelectedJobForCancel(job);
      setCancelReason('');
      setCancelDialogOpen(true);
    } catch (error) {
      console.error('Ï∑®ÏÜå Í∞ÄÎä• Ïó¨Î∂Ä ÌôïÏù∏ Ïã§Ìå®:', error);
      setSnackbar({
        open: true,
        message: 'Ï∑®ÏÜå Í∞ÄÎä• Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
        severity: 'error'
      });
    }
  };

  // ÏûëÏóÖ Ï∑®ÏÜå Ïã§Ìñâ
  const handleCancelJob = async () => {
    if (!selectedJobForCancel || !user?.id || !cancellationInfo?.canCancel) return;
    
    try {
      await JobCancellationService.cancelJob(
        selectedJobForCancel.id,
        user.id,
        user.name,
        cancelReason
      );
      
      const message = `ÏûëÏóÖÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.\n\nÏ∑®ÏÜå Ï†ïÎ≥¥:\n‚Ä¢ ${cancellationInfo.cancellationNumber}Î≤àÏß∏ Ï∑®ÏÜå\n‚Ä¢ Ïò§Îäò ${cancellationInfo.totalCancellationsToday}Ìöå Ï∑®ÏÜå (ÏµúÎåÄ ${cancellationInfo.maxDailyCancellations}Ìöå)`;
      
      setSnackbar({
        open: true,
        message,
        severity: 'success'
      });
      
      setCancelDialogOpen(false);
      setSelectedJobForCancel(null);
      setCancelReason('');
      setCancellationInfo(null);
      
      await loadData();
      
    } catch (error) {
      console.error('ÏûëÏóÖ Ï∑®ÏÜå Ïã§Ìå®:', error);
      setSnackbar({
        open: true,
        message: `ÏûëÏóÖ Ï∑®ÏÜåÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${(error as Error).message}`,
        severity: 'error'
      });
    }
  };

  // ÏûëÏóÖ ÏÉÅÌÉú ÌÖçÏä§Ìä∏
  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return 'ÎåÄÍ∏∞Ï§ë';
      case 'assigned': return 'Î∞∞Ï†ïÎê®';
      case 'product_preparing': return 'ÏûêÏû¨Ï§ÄÎπÑ';
      case 'product_ready': return 'ÏûêÏû¨ÏôÑÎ£å';
      case 'pickup_completed': return 'ÌîΩÏóÖÏôÑÎ£å';
      case 'in_progress': return 'ÏãúÍ≥µÏ§ë';
      case 'completed': return 'ÏôÑÎ£å';
      case 'cancelled': return 'Ï∑®ÏÜå';
      case 'product_not_ready': return 'Ï†úÌíà ÎØ∏Ï§ÄÎπÑ';
      case 'customer_absent': return 'ÏÜåÎπÑÏûê Î∂ÄÏû¨';
      case 'schedule_changed': return 'ÏùºÏ†ï Î≥ÄÍ≤Ω';
      default: return 'Ïïå Ïàò ÏóÜÏùå';
    }
  };

  // ÏûëÏóÖ ÏÉÅÌÉú ÏÉâÏÉÅ
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'warning';
      case 'assigned': return 'primary';
      case 'product_preparing': return 'warning';
      case 'product_ready': return 'info';
      case 'pickup_completed': return 'secondary';
      case 'in_progress': return 'success';
      case 'completed': return 'success';
      case 'cancelled': return 'error';
      case 'product_not_ready': return 'error';
      case 'customer_absent': return 'error';
      case 'schedule_changed': return 'warning';
      default: return 'default';
    }
  };

  // ÎÇ†Ïßú Ìè¨Îß∑
  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ko-KR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long'
    });
  };

  // ÏãúÍ∞Ñ Ìè¨Îß∑
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ko-KR', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Ï¥ù Í∞ÄÍ≤© Í≥ÑÏÇ∞
  const calculateTotalPrice = (job: ConstructionJob) => {
    if (!job.items || job.items.length === 0) {
      return 0;
    }
    return job.items.reduce((total, item) => total + item.totalPrice, 0);
  };

  // ÏßÄÏó≠Î≥Ñ ÏûëÏóÖ ÌïÑÌÑ∞ÎßÅ (ÎåÄÍ∏∞Ï§ëÏù∏ ÏûëÏóÖÎßå)
  const getJobsByRegion = () => {
    const jobsByRegion: { [key: string]: ConstructionJob[] } = {};
    
    // ÎåÄÍ∏∞Ï§ëÏù∏ ÏûëÏóÖÎßå ÌïÑÌÑ∞ÎßÅ
    const pendingJobs = jobs.filter(job => job.status === 'pending');
    
    pendingJobs.forEach(job => {
      const addressParts = job.address.split(' ');
      if (addressParts.length >= 2) {
        const region = addressParts[0]; // Ïãú/ÎèÑ
        const district = addressParts[1]; // Íµ¨/Íµ∞
        
        if (!jobsByRegion[region]) {
          jobsByRegion[region] = [];
        }
        jobsByRegion[region].push(job);
      }
    });
    
    return jobsByRegion;
  };

  // ÏßÄÏó≠ ÌïÑÌÑ∞ Ï†ÅÏö©Îêú ÏûëÏóÖ Î™©Î°ù (ÎåÄÍ∏∞Ï§ëÏù∏ ÏûëÏóÖÎßå)
  const getFilteredJobs = () => {
    // Î®ºÏ†Ä ÎåÄÍ∏∞Ï§ëÏù∏ ÏûëÏóÖÎßå ÌïÑÌÑ∞ÎßÅ
    const pendingJobs = jobs.filter(job => job.status === 'pending');
    
    // ÏßÄÏó≠ ÌïÑÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ ÎåÄÍ∏∞Ï§ëÏù∏ ÏûëÏóÖ Î™®Îëê Î∞òÌôò
    if (regionFilter.length === 0) {
      return pendingJobs;
    }
    
    // ÏßÄÏó≠ ÌïÑÌÑ∞ Ï†ÅÏö©
    return pendingJobs.filter(job => {
      const addressParts = job.address.split(' ');
      if (addressParts.length >= 2) {
        const region = addressParts[0];
        const district = addressParts[1];
        return regionFilter.includes(`${region} ${district}`);
      }
      return false;
    });
  };

  // ÏßÄÏó≠ ÌÜ†Í∏Ä
  const toggleRegion = (region: string) => {
    setExpandedRegions(prev => 
      prev.includes(region) 
        ? prev.filter(r => r !== region)
        : [...prev, region]
    );
  };

  // ÏßÄÏó≠ ÌïÑÌÑ∞ ÌÜ†Í∏Ä
  const toggleRegionFilter = (regionDistrict: string) => {
    setRegionFilter(prev => 
      prev.includes(regionDistrict)
        ? prev.filter(r => r !== regionDistrict)
        : [...prev, regionDistrict]
    );
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <Typography>Î°úÎî© Ï§ë...</Typography>
      </Box>
    );
  }

  // Ï∫òÎ¶∞Îçî Î∑∞ Î™®ÎìúÏùº Îïå
  if ((viewMode as string) === 'calendar') {
    return (
      <Box>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
          <Typography variant="h4">
            ÎåÄÍ∏∞Ï§ëÏù∏ ÏãúÍ≥µÍ±¥ - Ï∫òÎ¶∞Îçî Î≥¥Í∏∞
          </Typography>
          <Button
            variant="outlined"
            onClick={() => setViewMode('list')}
          >
            Î™©Î°ù Î≥¥Í∏∞
          </Button>
        </Box>
        <CalendarView />
              </Box>
    );
  }

  // Î™©Î°ù Î∑∞ Î™®Îìú
  const filteredJobs = getFilteredJobs();
  const jobsByRegion = getJobsByRegion();
                
                return (
                  <Box>
                    <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">
          ÎåÄÍ∏∞Ï§ëÏù∏ ÏãúÍ≥µÍ±¥
                      </Typography>
                      <Box display="flex" gap={2}>
                                      <Button 
            variant={(viewMode as string) === 'list' ? "contained" : "outlined"}
            startIcon={<Schedule />}
            onClick={() => setViewMode('list')}
          >
            Î™©Î°ù Î≥¥Í∏∞
                                      </Button>
        <Button
            variant={(viewMode as string) === 'calendar' ? "contained" : "outlined"}
          startIcon={<CalendarMonth />}
          onClick={() => setViewMode('calendar')}
        >
          Ïä§ÏºÄÏ§Ñ Î≥¥Í∏∞
        </Button>
        </Box>
      </Box>
      
             {/* ÏßÄÏó≠ ÌïÑÌÑ∞ */}
       <Card sx={{ mb: 3 }}>
         <CardContent>
             <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
            <Typography variant="h6">
              ÏßÄÏó≠ ÌïÑÌÑ∞
               </Typography>
               <Button
                 size="small"
                 onClick={() => setRegionFilterExpanded(!regionFilterExpanded)}
               >
              {regionFilterExpanded ? <ExpandLess /> : <ExpandMore />}
               </Button>
             </Box>
            
                         <Collapse in={regionFilterExpanded}>
            <Grid container spacing={2}>
              {Object.entries(regionData).map(([region, districts]) => (
                <Grid item xs={12} sm={6} md={4} key={region}>
                  <Card variant="outlined">
                    <CardContent>
                      <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                        <Typography variant="subtitle2" fontWeight="bold">
                          {region}
                        </Typography>
                 <Button
                   size="small"
                          onClick={() => toggleRegion(region)}
                        >
                          {expandedRegions.includes(region) ? <ExpandLess /> : <ExpandMore />}
                 </Button>
               </Box>
               
                      <Collapse in={expandedRegions.includes(region)}>
                        <Box display="flex" flexDirection="column" gap={0.5}>
                          {districts.map(district => {
                            const regionDistrict = `${region} ${district}`;
                            const isSelected = regionFilter.includes(regionDistrict);
                 
                 return (
                       <FormControlLabel
                                key={district}
                         control={
                           <Checkbox
                             size="small"
                                    checked={isSelected}
                                    onChange={() => toggleRegionFilter(regionDistrict)}
                                   />
                                 }
                                 label={
                                  <Typography variant="body2">
                                    {district}
                                   </Typography>
                                 }
                              />
                 );
                                })}
               </Box>
             </Collapse>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
          </Collapse>
         </CardContent>
       </Card>

      {/* ÏûëÏóÖ Î™©Î°ù */}
      <Grid container spacing={3}>
        {filteredJobs.length === 0 ? (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" textAlign="center" color="textSecondary" py={4}>
                  {regionFilter.length > 0 ? 'ÏÑ†ÌÉùÌïú ÏßÄÏó≠Ïóê ÏûëÏóÖÏù¥ ÏóÜÏäµÎãàÎã§.' : 'Îì±Î°ùÎêú ÏûëÏóÖÏù¥ ÏóÜÏäµÎãàÎã§.'}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        ) : (
          filteredJobs.map((job) => (
            <Grid item xs={12} key={job.id}>
              <Card>
                <CardContent>
                  <Box display="flex" justifyContent="space-between" alignItems="flex-start" mb={2}>
                    <Typography variant="h6">
                      {job.title}
                    </Typography>
                        <Chip 
                      label={getStatusText(job.status)} 
                      color={getStatusColor(job.status)} 
                          size="small" 
                        />
                  </Box>
                  
                  <Typography variant="body2" color="textSecondary" mb={1}>
                    {job.description}
                  </Typography>
                  
                  <Box display="flex" alignItems="center" gap={1} mb={1}>
                    <LocationOn fontSize="small" color="action" />
                    <Typography variant="body2" color="textSecondary">
                      {formatAddressForCard(job.address)}
                    </Typography>
                  </Box>

                  {job.scheduledDate && (
                    <Box display="flex" alignItems="center" gap={1} mb={1}>
                      <Schedule fontSize="small" color="action" />
                      <Typography variant="body2" color="textSecondary">
                        {formatDate(job.scheduledDate)} {formatTime(job.scheduledDate)}
                      </Typography>
                    </Box>
                  )}
                  
                  <Typography variant="body2" color="textSecondary" mb={2}>
                    ÏòàÏÇ∞: {job.budget?.min?.toLocaleString()}~{job.budget?.max?.toLocaleString()}Ïõê
                  </Typography>
                  
                      {job.status === 'pending' && (
                        <Button 
                          variant="contained" 
                      color="primary"
                          onClick={() => handleAcceptJob(job.id)}
                      sx={{ mr: 1 }}
                        >
                      ÏûëÏóÖ ÏàòÎùΩ
                        </Button>
                      )}
                  
                  {job.status === 'assigned' && job.contractorId === user?.id && (
                          <Button 
                            variant="outlined" 
                      color="error"
                      startIcon={<Cancel />}
                      onClick={() => handleCancelJobClick(job)}
                          >
                      ÏûëÏóÖ Ï∑®ÏÜå
                          </Button>
                  )}
                </CardContent>
              </Card>
            </Grid>
          ))
        )}
      </Grid>

      {/* ÏûëÏóÖ Ï∑®ÏÜå ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
      <Snackbar
        open={cancelDialogOpen}
        onClose={() => setCancelDialogOpen(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Card sx={{ maxWidth: 600, width: '100%' }}>
          <CardContent>
            {selectedJobForCancel && cancellationInfo && (
              <Box>
                <Typography variant="h5" gutterBottom sx={{ color: '#f44336', fontWeight: 'bold' }}>
                  üö´ ÏûëÏóÖ Ï∑®ÏÜå ÌôïÏù∏
          </Typography>
                
                {!cancellationInfo.canCancel ? (
                  <Box>
                    <Alert severity="error" sx={{ mb: 2 }}>
                      <Typography variant="h6" gutterBottom>
                        Ï∑®ÏÜåÌï† Ïàò ÏóÜÏäµÎãàÎã§
                      </Typography>
                      <Typography variant="body2">
                        {cancellationInfo.reason}
                      </Typography>
                    </Alert>
                    
                    <Box sx={{ mt: 2 }}>
                      <Button
                        variant="contained"
                        onClick={() => setCancelDialogOpen(false)}
                        fullWidth
                      >
                        ÌôïÏù∏
                      </Button>
        </Box>
                  </Box>
                ) : (
                  <Box>
                    <Typography variant="body1" gutterBottom>
                      <strong>{selectedJobForCancel.title}</strong> ÏûëÏóÖÏùÑ Ï∑®ÏÜåÌïòÏãúÍ≤†ÏäµÎãàÍπå?
                    </Typography>
                    
                    <Box sx={{ mb: 3, p: 2, backgroundColor: '#fff3e0', borderRadius: 1 }}>
                      <Typography variant="body2" gutterBottom>
                        <strong>Ï∑®ÏÜå Ï†ïÎ≥¥:</strong>
                      </Typography>
                      <Typography variant="body2" color="textSecondary">
                        ‚Ä¢ {cancellationInfo.cancellationNumber}Î≤àÏß∏ Ï∑®ÏÜå
                      </Typography>
                      <Typography variant="body2" color="textSecondary">
                        ‚Ä¢ Ïò§Îäò {cancellationInfo.totalCancellationsToday}Ìöå Ï∑®ÏÜå (ÏµúÎåÄ {cancellationInfo.maxDailyCancellations}Ìöå)
                      </Typography>
                      <Typography variant="body2" color="textSecondary">
                        ‚Ä¢ ÏàòÎùΩ ÌõÑ {cancellationInfo.maxCancellationHours}ÏãúÍ∞ÑÍπåÏßÄ Ï∑®ÏÜå Í∞ÄÎä•
                      </Typography>
                      {cancellationInfo.requiresFee && cancellationInfo.feeAmount && (
                        <>
                          <Typography variant="body2" color="error" sx={{ mt: 1, fontWeight: 'bold' }}>
                            ‚ö†Ô∏è ÏàòÏàòÎ£å Ï†ÅÏö©
                          </Typography>
                          <Typography variant="body2" color="error">
                            ‚Ä¢ ÏàòÏàòÎ£åÏú®: {cancellationInfo.feeRate}%
                          </Typography>
                          <Typography variant="body2" color="error">
                            ‚Ä¢ ÏàòÏàòÎ£å Í∏àÏï°: {cancellationInfo.feeAmount.toLocaleString()}Ïõê
                          </Typography>
                        </>
                      )}
                    </Box>
                    
                    <TextField
                      fullWidth
                      label="Ï∑®ÏÜå ÏÇ¨Ïú† (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
                      multiline
                      rows={3}
                      value={cancelReason}
                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCancelReason(e.target.value)}
                      placeholder="Ï∑®ÏÜå ÏÇ¨Ïú†Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî..."
                      sx={{ mb: 3 }}
                    />
                    
                    <Box sx={{ display: 'flex', gap: 2 }}>
                      <Button
                        variant="outlined"
                        onClick={() => setCancelDialogOpen(false)}
                        sx={{ flex: 1 }}
                      >
                        Ï∑®ÏÜå
                      </Button>
                      <Button
                        variant="contained"
                        color="error"
                        onClick={handleCancelJob}
                        sx={{ flex: 1 }}
                      >
                        ÏûëÏóÖ Ï∑®ÏÜå
                      </Button>
                    </Box>
                  </Box>
                )}
              </Box>
            )}
          </CardContent>
        </Card>
      </Snackbar>

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default JobList;
